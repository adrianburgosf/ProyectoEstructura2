
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.List;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;


/*
================================================================
Integrantes: Josue Espinal, Eduardo Aguilar, Adrian Burgos
Algunas acciones a evitar:
-Buscar/modificar/eliminar sin antes haber guardado despues de introducir un registro
-Crear archivos XML o Excel sin antes haber guardado o abierto un archivo
Hace falta indices y cruzar archivos
 */
public class Main extends javax.swing.JFrame {

    private ArrayList<BTree> trees = null;
    boolean archivoAbiertoBool = false;
    private Archivo archivoAbierto = new Archivo();
    int indexSiendoModificado = -1;
    JFileChooser FileOWindow = new JFileChooser();
    File OpenFile;
    public ArrayList<JTextField> textAreaCampos = new ArrayList<JTextField>();
    public ArrayList<JLabel> textArealabels = new ArrayList<JLabel>();
    public ArrayList<Integer> AvailList = new ArrayList<Integer>();
    public String directions = "";

    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nuevoCampoDialog = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        NuevoCampoNombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        NuevoCampoTipo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        NuevoCampoLongitud = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        llavePrimariaCheckbox = new javax.swing.JCheckBox();
        registrarButton = new javax.swing.JButton();
        modificarButton = new javax.swing.JButton();
        nuevoRegistroDialog = new javax.swing.JDialog();
        panelDialogCampos = new javax.swing.JPanel();
        botonModificarRegistro = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        botonAgregarRegistro = new javax.swing.JButton();
        buscarRecord = new javax.swing.JDialog();
        camposCBox = new javax.swing.JComboBox<>();
        SearchTF = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaSearch = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        botonMenuArchivos = new javax.swing.JButton();
        botonMenuCampos = new javax.swing.JButton();
        botonMenuRegistros = new javax.swing.JButton();
        botonMenuIndices = new javax.swing.JButton();
        botonMenuUtilidades = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ArchivoAbiertoIndicatorLight = new javax.swing.JPanel();
        ArchivoAbiertoIndicatorText = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        panelArchivos = new javax.swing.JPanel();
        TitleArchivos = new javax.swing.JLabel();
        newFB = new javax.swing.JButton();
        saveB = new javax.swing.JButton();
        closeFB = new javax.swing.JButton();
        close2B = new javax.swing.JButton();
        openB = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ArchivoTextPane = new javax.swing.JTextArea();
        panelCampos = new javax.swing.JPanel();
        TitleCampos = new javax.swing.JLabel();
        crearCampoButton = new javax.swing.JButton();
        modificarCampoButton = new javax.swing.JButton();
        borrarCampoButton = new javax.swing.JButton();
        camposTabla = new javax.swing.JScrollPane();
        camposTable = new javax.swing.JTable();
        panelRegistros = new javax.swing.JPanel();
        TitleRegistros = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRegistros = new javax.swing.JTable();
        panelIndices = new javax.swing.JPanel();
        TitleIndices = new javax.swing.JLabel();
        panelUtilidades = new javax.swing.JPanel();
        TitleUtilidades = new javax.swing.JLabel();
        crearCampoButton1 = new javax.swing.JButton();
        crearCampoButton2 = new javax.swing.JButton();

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Nuevo Campo");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Nombre:");

        NuevoCampoNombre.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Tipo:");

        NuevoCampoTipo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        NuevoCampoTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "int", "char" }));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Longitud:");

        NuevoCampoLongitud.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Llave: ");

        llavePrimariaCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        llavePrimariaCheckbox.setText("Primaria");
        llavePrimariaCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                llavePrimariaCheckboxActionPerformed(evt);
            }
        });

        registrarButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        registrarButton.setText("REGISTRAR");
        registrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarButtonActionPerformed(evt);
            }
        });

        modificarButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        modificarButton.setText("MODIFICAR");
        modificarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout nuevoCampoDialogLayout = new javax.swing.GroupLayout(nuevoCampoDialog.getContentPane());
        nuevoCampoDialog.getContentPane().setLayout(nuevoCampoDialogLayout);
        nuevoCampoDialogLayout.setHorizontalGroup(
            nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(nuevoCampoDialogLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nuevoCampoDialogLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NuevoCampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nuevoCampoDialogLayout.createSequentialGroup()
                        .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NuevoCampoTipo, 0, 119, Short.MAX_VALUE)
                            .addComponent(llavePrimariaCheckbox)
                            .addComponent(NuevoCampoLongitud))))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nuevoCampoDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(modificarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(registrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
        nuevoCampoDialogLayout.setVerticalGroup(
            nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nuevoCampoDialogLayout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NuevoCampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NuevoCampoTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NuevoCampoLongitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(llavePrimariaCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(nuevoCampoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modificarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        botonModificarRegistro.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        botonModificarRegistro.setText("MODIFICAR REGISTRO");
        botonModificarRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonModificarRegistroMouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("NUEVO REGISTRO");

        botonAgregarRegistro.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        botonAgregarRegistro.setText("AGREGAR REGISTRO");
        botonAgregarRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAgregarRegistroMouseClicked(evt);
            }
        });
        botonAgregarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDialogCamposLayout = new javax.swing.GroupLayout(panelDialogCampos);
        panelDialogCampos.setLayout(panelDialogCamposLayout);
        panelDialogCamposLayout.setHorizontalGroup(
            panelDialogCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDialogCamposLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonModificarRegistro)
                .addGap(40, 40, 40)
                .addComponent(botonAgregarRegistro)
                .addGap(52, 52, 52))
        );
        panelDialogCamposLayout.setVerticalGroup(
            panelDialogCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDialogCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                .addGroup(panelDialogCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAgregarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonModificarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout nuevoRegistroDialogLayout = new javax.swing.GroupLayout(nuevoRegistroDialog.getContentPane());
        nuevoRegistroDialog.getContentPane().setLayout(nuevoRegistroDialogLayout);
        nuevoRegistroDialogLayout.setHorizontalGroup(
            nuevoRegistroDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nuevoRegistroDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDialogCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        nuevoRegistroDialogLayout.setVerticalGroup(
            nuevoRegistroDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nuevoRegistroDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDialogCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        camposCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camposCBoxActionPerformed(evt);
            }
        });

        tablaSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablaSearch);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buscarRecordLayout = new javax.swing.GroupLayout(buscarRecord.getContentPane());
        buscarRecord.getContentPane().setLayout(buscarRecordLayout);
        buscarRecordLayout.setHorizontalGroup(
            buscarRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buscarRecordLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(buscarRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(buscarRecordLayout.createSequentialGroup()
                        .addComponent(camposCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(SearchTF, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );
        buscarRecordLayout.setVerticalGroup(
            buscarRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buscarRecordLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(buscarRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(camposCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(buscarRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(240, 235, 216));
        setName("mainPanel"); // NOI18N

        menuPanel.setBackground(new java.awt.Color(13, 19, 33));

        botonMenuArchivos.setBackground(new java.awt.Color(62, 92, 118));
        botonMenuArchivos.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        botonMenuArchivos.setForeground(new java.awt.Color(240, 235, 216));
        botonMenuArchivos.setText("Archivos");
        botonMenuArchivos.setToolTipText("");
        botonMenuArchivos.setBorder(null);
        botonMenuArchivos.setBorderPainted(false);
        botonMenuArchivos.setFocusPainted(false);
        botonMenuArchivos.setOpaque(true);
        botonMenuArchivos.setSelected(true);
        botonMenuArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenuArchivosActionPerformed(evt);
            }
        });

        botonMenuCampos.setBackground(new java.awt.Color(13, 19, 33));
        botonMenuCampos.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        botonMenuCampos.setForeground(new java.awt.Color(240, 235, 216));
        botonMenuCampos.setText("Campos");
        botonMenuCampos.setBorderPainted(false);
        botonMenuCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenuCamposActionPerformed(evt);
            }
        });

        botonMenuRegistros.setBackground(new java.awt.Color(13, 19, 33));
        botonMenuRegistros.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        botonMenuRegistros.setForeground(new java.awt.Color(240, 235, 216));
        botonMenuRegistros.setText("Registros");
        botonMenuRegistros.setBorderPainted(false);
        botonMenuRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenuRegistrosActionPerformed(evt);
            }
        });

        botonMenuIndices.setBackground(new java.awt.Color(13, 19, 33));
        botonMenuIndices.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        botonMenuIndices.setForeground(new java.awt.Color(240, 235, 216));
        botonMenuIndices.setText("Indices");
        botonMenuIndices.setBorderPainted(false);
        botonMenuIndices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenuIndicesActionPerformed(evt);
            }
        });

        botonMenuUtilidades.setBackground(new java.awt.Color(13, 19, 33));
        botonMenuUtilidades.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        botonMenuUtilidades.setForeground(new java.awt.Color(240, 235, 216));
        botonMenuUtilidades.setText("Utilidades");
        botonMenuUtilidades.setBorderPainted(false);
        botonMenuUtilidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenuUtilidadesActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo_Unitec_Resized.png"))); // NOI18N

        jLabel1.setForeground(new java.awt.Color(240, 235, 216));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Adrian Burgos | Eduardo Aguilar | Josue Espinal");

        jLabel2.setBackground(new java.awt.Color(240, 235, 216));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 235, 216));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("FILE MANAGER ");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        ArchivoAbiertoIndicatorLight.setBackground(new java.awt.Color(255, 153, 153));

        javax.swing.GroupLayout ArchivoAbiertoIndicatorLightLayout = new javax.swing.GroupLayout(ArchivoAbiertoIndicatorLight);
        ArchivoAbiertoIndicatorLight.setLayout(ArchivoAbiertoIndicatorLightLayout);
        ArchivoAbiertoIndicatorLightLayout.setHorizontalGroup(
            ArchivoAbiertoIndicatorLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        ArchivoAbiertoIndicatorLightLayout.setVerticalGroup(
            ArchivoAbiertoIndicatorLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        ArchivoAbiertoIndicatorText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ArchivoAbiertoIndicatorText.setForeground(new java.awt.Color(240, 235, 216));
        ArchivoAbiertoIndicatorText.setText("ARCHIVO CERRADO");

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(botonMenuArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(botonMenuIndices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(botonMenuUtilidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(botonMenuCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(botonMenuRegistros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel5)
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(ArchivoAbiertoIndicatorLight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ArchivoAbiertoIndicatorText, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ArchivoAbiertoIndicatorLight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArchivoAbiertoIndicatorText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addComponent(botonMenuArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonMenuCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonMenuRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonMenuIndices, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonMenuUtilidades, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        mainPanel.setBackground(new java.awt.Color(240, 235, 216));
        mainPanel.setLayout(new java.awt.CardLayout());

        TitleArchivos.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        TitleArchivos.setForeground(new java.awt.Color(13, 19, 33));
        TitleArchivos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleArchivos.setText("MENU ARCHIVOS");

        newFB.setText("Nuevo Archivo");
        newFB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFBActionPerformed(evt);
            }
        });

        saveB.setText("Salvar Archivo");
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        closeFB.setText("Cerrar Archivo");
        closeFB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFBActionPerformed(evt);
            }
        });

        close2B.setText("Cerrar Aplicacion");
        close2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close2BActionPerformed(evt);
            }
        });

        openB.setText("Abrir Archivo");
        openB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBActionPerformed(evt);
            }
        });

        ArchivoTextPane.setColumns(20);
        ArchivoTextPane.setRows(5);
        jScrollPane2.setViewportView(ArchivoTextPane);

        javax.swing.GroupLayout panelArchivosLayout = new javax.swing.GroupLayout(panelArchivos);
        panelArchivos.setLayout(panelArchivosLayout);
        panelArchivosLayout.setHorizontalGroup(
            panelArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelArchivosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newFB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeFB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(close2B, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(openB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(panelArchivosLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(TitleArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelArchivosLayout.setVerticalGroup(
            panelArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelArchivosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelArchivosLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(newFB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeFB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(openB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(close2B, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelArchivosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        mainPanel.add(panelArchivos, "panelArchivos");

        TitleCampos.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        TitleCampos.setForeground(new java.awt.Color(13, 19, 33));
        TitleCampos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleCampos.setText("MENU CAMPOS");

        crearCampoButton.setText("Crear Campo");
        crearCampoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearCampoButtonActionPerformed(evt);
            }
        });

        modificarCampoButton.setText("Modificar Campo");
        modificarCampoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarCampoButtonActionPerformed(evt);
            }
        });

        borrarCampoButton.setText("Borrar Campo");
        borrarCampoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarCampoButtonActionPerformed(evt);
            }
        });

        camposTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        camposTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "Longitud", "Llave Primaria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        camposTabla.setViewportView(camposTable);

        javax.swing.GroupLayout panelCamposLayout = new javax.swing.GroupLayout(panelCampos);
        panelCampos.setLayout(panelCamposLayout);
        panelCamposLayout.setHorizontalGroup(
            panelCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamposLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(TitleCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crearCampoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modificarCampoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(borrarCampoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addComponent(camposTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        panelCamposLayout.setVerticalGroup(
            panelCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCamposLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(crearCampoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modificarCampoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(borrarCampoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelCamposLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(camposTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        mainPanel.add(panelCampos, "panelCampos");

        TitleRegistros.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        TitleRegistros.setForeground(new java.awt.Color(13, 19, 33));
        TitleRegistros.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleRegistros.setText("MENU REGISTROS");

        jButton4.setText("Introducir Registro");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Modificar Registro");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton8.setText("Buscar Registro");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Borrar Registro");
        jButton9.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jButton9AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        tablaRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaRegistros);

        javax.swing.GroupLayout panelRegistrosLayout = new javax.swing.GroupLayout(panelRegistros);
        panelRegistros.setLayout(panelRegistrosLayout);
        panelRegistrosLayout.setHorizontalGroup(
            panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegistrosLayout.createSequentialGroup()
                .addGroup(panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRegistrosLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(TitleRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelRegistrosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)))
                .addGap(12, 12, 12))
        );
        panelRegistrosLayout.setVerticalGroup(
            panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRegistrosLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelRegistrosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        mainPanel.add(panelRegistros, "panelRegistros");

        TitleIndices.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        TitleIndices.setForeground(new java.awt.Color(13, 19, 33));
        TitleIndices.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleIndices.setText("MENU INDICES");

        javax.swing.GroupLayout panelIndicesLayout = new javax.swing.GroupLayout(panelIndices);
        panelIndices.setLayout(panelIndicesLayout);
        panelIndicesLayout.setHorizontalGroup(
            panelIndicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIndicesLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(TitleIndices, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );
        panelIndicesLayout.setVerticalGroup(
            panelIndicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIndicesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleIndices, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(584, Short.MAX_VALUE))
        );

        mainPanel.add(panelIndices, "panelIndices");

        TitleUtilidades.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        TitleUtilidades.setForeground(new java.awt.Color(13, 19, 33));
        TitleUtilidades.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleUtilidades.setText("MENU UTILIDADES");

        crearCampoButton1.setText("EXCEL");
        crearCampoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearCampoButton1ActionPerformed(evt);
            }
        });

        crearCampoButton2.setText("XML");
        crearCampoButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearCampoButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelUtilidadesLayout = new javax.swing.GroupLayout(panelUtilidades);
        panelUtilidades.setLayout(panelUtilidadesLayout);
        panelUtilidadesLayout.setHorizontalGroup(
            panelUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUtilidadesLayout.createSequentialGroup()
                .addGroup(panelUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUtilidadesLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(TitleUtilidades, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelUtilidadesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(crearCampoButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelUtilidadesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(crearCampoButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        panelUtilidadesLayout.setVerticalGroup(
            panelUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUtilidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleUtilidades, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(crearCampoButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(crearCampoButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(378, Short.MAX_VALUE))
        );

        mainPanel.add(panelUtilidades, "panelUtilidades");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("mainPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonMenuArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenuArchivosActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "panelArchivos");
        botonMenuArchivos.setBackground(colorTres);
        botonMenuRegistros.setBackground(colorCinco);
        botonMenuCampos.setBackground(colorCinco);
        botonMenuIndices.setBackground(colorCinco);
        botonMenuUtilidades.setBackground(colorCinco);
        if (archivoAbiertoBool) {
            ArchivoTextPane.setText("");
            ArchivoTextPane.setText(archivoAbierto.toString());
        }
    }//GEN-LAST:event_botonMenuArchivosActionPerformed

    private void botonMenuCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenuCamposActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "panelCampos");
        botonMenuArchivos.setBackground(colorCinco);
        botonMenuRegistros.setBackground(colorCinco);
        botonMenuCampos.setBackground(colorTres);
        botonMenuIndices.setBackground(colorCinco);
        botonMenuUtilidades.setBackground(colorCinco);
    }//GEN-LAST:event_botonMenuCamposActionPerformed

    private void botonMenuRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenuRegistrosActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "panelRegistros");
        botonMenuArchivos.setBackground(colorCinco);
        botonMenuRegistros.setBackground(colorTres);
        botonMenuCampos.setBackground(colorCinco);
        botonMenuIndices.setBackground(colorCinco);
        botonMenuUtilidades.setBackground(colorCinco);
        //  tablaRegistros.setModel(new DefaultTableModel());
        /* DefaultTableModel model = (DefaultTableModel) tablaRegistros.getModel();
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            model.addColumn(archivoAbierto.getListaCampos().get(i).getName());
        }
        model.setNumRows(0);
        ArrayList<Long> offsets = new ArrayList<Long>();
        getPrimeK().getOffsets(getPrimeK().getRaiz(), offsets);
        int l = 0;
        int h = 100;
        System.out.println("listaa: " + offsets);
        for (int i = 1; i < offsets.size(); i += 1) {
            offsets.remove(i);
        }
        //   Collections.sort(offsets);
        System.out.println("listaa: " + offsets);
        uploadRegistrosList(l, h, offsets);*/
    }//GEN-LAST:event_botonMenuRegistrosActionPerformed

    public void uploadRegistrosList(int l, int h, ArrayList<Long> x) {
        DefaultTableModel model = (DefaultTableModel) tablaRegistros.getModel();
        for (int i = l; i < x.size(); i++) {
            long RRN = x.get(i);
            try {
                String data = buscarR(Math.toIntExact(RRN));

                String arr[] = data.split("\\,");
                Object arr2[] = new Object[model.getColumnCount()];
                for (int j = 0; j < model.getColumnCount(); j++) {
                    arr2[j] = arr[j];
                }
                model.addRow(arr2);

            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void botonMenuIndicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenuIndicesActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "panelIndices");
        botonMenuArchivos.setBackground(colorCinco);
        botonMenuRegistros.setBackground(colorCinco);
        botonMenuCampos.setBackground(colorCinco);
        botonMenuIndices.setBackground(colorTres);
        botonMenuUtilidades.setBackground(colorCinco);
        //getPrimeK().imprimir_arbol(0, 0);
    }//GEN-LAST:event_botonMenuIndicesActionPerformed

    private void botonMenuUtilidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenuUtilidadesActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "panelUtilidades");
        botonMenuArchivos.setBackground(colorCinco);
        botonMenuRegistros.setBackground(colorCinco);
        botonMenuCampos.setBackground(colorCinco);
        botonMenuIndices.setBackground(colorCinco);
        botonMenuUtilidades.setBackground(colorTres);
    }//GEN-LAST:event_botonMenuUtilidadesActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        /*CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "panelArchivos");
        botonMenuArchivos.setBackground(colorCinco);
        botonMenuRegistros.setBackground(colorCinco);
        botonMenuCampos.setBackground(colorCinco);
        botonMenuIndices.setBackground(colorCinco);
        botonMenuUtilidades.setBackground(colorCinco);
        ArchivoTextPane.setText("");
        ArchivoTextPane.setText(archivoAbierto.toString());*/
    }//GEN-LAST:event_jLabel2MouseClicked

    private void crearCampoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearCampoButtonActionPerformed
        registrarButton.setEnabled(true);
        modificarButton.setEnabled(false);
        mostrarNuevoCampo();
        updateCampoTable();
    }//GEN-LAST:event_crearCampoButtonActionPerformed

    private void modificarCampoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarCampoButtonActionPerformed
        if (camposTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Porfavor seleccione una variable que modificar.");
        } else {
            Campo c = archivoAbierto.getCampo(camposTable.getSelectedRow());
            indexSiendoModificado = camposTable.getSelectedRow();
            registrarButton.setEnabled(false);
            modificarButton.setEnabled(true);
            NuevoCampoNombre.setText(c.getName());
            NuevoCampoLongitud.setValue(c.getSize());
            NuevoCampoTipo.setSelectedItem(c.getType());
            if (c.isPrimKey()) {
                llavePrimariaCheckbox.setSelected(true);
                llavePrimariaCheckbox.setEnabled(true);
            }
            mostrarNuevoCampo();
        }
    }//GEN-LAST:event_modificarCampoButtonActionPerformed

    private void borrarCampoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarCampoButtonActionPerformed
        if (camposTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Porfavor seleccione un campo que borrar.");
        } else {
            archivoAbierto.delCampo(camposTable.getSelectedRow());
            updateCampoTable();
        }
    }//GEN-LAST:event_borrarCampoButtonActionPerformed

    private int getPrimeKey() {
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            if (archivoAbierto.getCampo(i).isPrimKey()) {
                return i;
            }
        }
        return -1;
    }

    public BTree getPrimeK() {
        return trees.get(getPrimeKey());
    }
    private void newFBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFBActionPerformed
        //UNFINISHED
        if (archivoAbiertoBool == false) {
            textAreaCampos.clear();
            textArealabels.clear();
            JFileChooser create = new JFileChooser("./");
            int result = create.showSaveDialog(null);
            File archivo = new File(create.getSelectedFile() + ".jae");

            if (result == JFileChooser.APPROVE_OPTION) {
                String nameFile = archivo.getName();
                String dir = archivo.toString();
                directions = archivo.toString();
                
                if (nameFile == null || "".equals(nameFile)) {
                    JOptionPane.showMessageDialog(null, "El nombre del archivo no es valido.");
                } else {

                    FileName = nameFile;
                    archivoAbierto = new Archivo(FileName);
                    try {
                        //FileOutputStream oStream = new FileOutputStream(new File(FileName)); 
                        BufferedWriter exit = new BufferedWriter(new FileWriter(new File(dir)));
                        exit.close();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    archivoAbiertoBool = true;
                    abrirArchivo();
                    JOptionPane.showMessageDialog(null, "Archivo creado exitosamente");
                    ArchivoTextPane.setText("");
                    ArchivoTextPane.setText(archivoAbierto.toString());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "ERROR: Ya hay un archivo abierto!", "Hey!", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_newFBActionPerformed

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed

        String campos = FileName;
        guardarFile(campos, 1);
        archivoAbierto.sizeCamposs();
    }//GEN-LAST:event_saveBActionPerformed
    
    public void guardarFile(String cadena, int b) {
        String availListHead = "" + archivoAbierto.getAvailListHead() + "\n";
        String campos = "";
        String registros = "\n";
        for (Campo campo : archivoAbierto.getListaCampos()) {
            campos += "|" + campo.getName() + "," + campo.getType() + "," + campo.getSize() + ",";
            if (campo.isPrimKey() == true) {
                campos += "true";
            } 
            else {
                campos += "false";
            }
        }
        campos += "|";
        for (int i = 0; i < archivoAbierto.getRegistros().size(); i++) {
            registros += archivoAbierto.getRegistros().get(i) + "\n";
        }
        try {
            FileOutputStream fos = new FileOutputStream(new File(directions));
            BufferedOutputStream writer = new BufferedOutputStream(fos);
            writer.write(availListHead.getBytes());
            writer.write(campos.getBytes());
            writer.write(registros.getBytes());
            writer.flush();
            writer.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        if (b == 1) {
            JOptionPane.showMessageDialog(null, "Archivo salvado exitosamente");
        }
    }
    private void closeFBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFBActionPerformed
        //UNFINISHED
        if (archivoAbiertoBool) {
            int reply = JOptionPane.showConfirmDialog(null, "Esta seguro que desea cerrar el archivo? Cualquier cambio no guardado"
                    + "se perdera.", "Precaucion", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                cerrarArchivo();
                JOptionPane.showMessageDialog(null, "Archivo cerrado exitosamente");
                clearCampoTable();
                clearRegistroTable();
                ArchivoTextPane.setText("");
                AvailList.clear();
                archivoAbiertoBool = false;
                for (int i = 0; i < textAreaCampos.size(); i++) {
                    panelDialogCampos.remove(textAreaCampos.get(i));
                }
                for (int i = 0; i < textArealabels.size(); i++) {
                    panelDialogCampos.remove(textArealabels.get(i));
                }
                textAreaCampos.clear();
                textArealabels.clear();
                panelDialogCampos.revalidate();
                panelDialogCampos.repaint();
            }
            crearCampoButton.setEnabled(true);
            borrarCampoButton.setEnabled(true);
            modificarCampoButton.setEnabled(true);
            posicion = 0;

        } else {
            JOptionPane.showMessageDialog(null, "No hay un archivo abierto que cerrar.");
        }
    }//GEN-LAST:event_closeFBActionPerformed

    private void close2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close2BActionPerformed
        //UNFINISHED
        if (archivoAbiertoBool) {
            int reply = JOptionPane.showConfirmDialog(null, "Esta seguro que desea cerrar el programa? Cualquier cambio no guardado"
                    + "se perdera.", "Precaucion", JOptionPane.YES_NO_OPTION);

            for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                if (archivoAbierto.getCampo(i).isPrimKey()) {
                    try {
                        FileOutputStream fw = null;
                        ObjectOutputStream bw = null;
                        try {
                            String namae = FileName + archivoAbierto.getCampo(i).getName();
                            fw = new FileOutputStream(namae + "BTree");
                            bw = new ObjectOutputStream(fw);
                            bw.writeObject(trees.get(i));
                            bw.flush();
                        } catch (Exception ex) {
                        } finally {
                            try {
                                bw.close();
                                fw.close();
                            } catch (Exception ex) {
                            }
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            if (reply == JOptionPane.YES_OPTION) {
                cerrarArchivo();
                System.exit(0);
            }
        } else {
            System.exit(0);
        }


    }//GEN-LAST:event_close2BActionPerformed

    private void llavePrimariaCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_llavePrimariaCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_llavePrimariaCheckboxActionPerformed

    private void registrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarButtonActionPerformed
        if (NuevoCampoNombre.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Porfavor agregar un nombre al atributo.");
        } else {
            if ((int) NuevoCampoLongitud.getValue() == 0) {
                JOptionPane.showMessageDialog(null, "El campo no puede ser de longitud 0.");
            } else {
                Campo c = new Campo(NuevoCampoNombre.getText(), NuevoCampoTipo.getSelectedItem().toString(), (int) NuevoCampoLongitud.getValue(), llavePrimariaCheckbox.isSelected());
                nuevoCampoDialog.setVisible(false);
                archivoAbierto.addCampo(c);
                NuevoCampoNombre.setText("");
                NuevoCampoLongitud.setValue(0);
                NuevoCampoTipo.setSelectedIndex(0);
                llavePrimariaCheckbox.setSelected(false);
            }
        }
    }//GEN-LAST:event_registrarButtonActionPerformed

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarButtonActionPerformed
        if (NuevoCampoNombre.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Porfavor agregar un nombre al atributo.");
        } else {
            if ((int) NuevoCampoLongitud.getValue() == 0) {
                JOptionPane.showMessageDialog(null, "El campo no puede ser de longitud 0.");
            } else {
                Campo c = new Campo(NuevoCampoNombre.getText(), NuevoCampoTipo.getSelectedItem().toString(), (int) NuevoCampoLongitud.getValue(), llavePrimariaCheckbox.isSelected());
                nuevoCampoDialog.setVisible(false);
                archivoAbierto.delCampo(indexSiendoModificado);
                archivoAbierto.addCampo(c, indexSiendoModificado);
                NuevoCampoNombre.setText("");
                NuevoCampoLongitud.setValue(0);
                NuevoCampoTipo.setSelectedIndex(0);
                llavePrimariaCheckbox.setSelected(false);
                updateCampoTable();
            }
        }
        archivoAbierto.printCampos();
    }//GEN-LAST:event_modificarButtonActionPerformed

    private void openBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBActionPerformed
        if (archivoAbiertoBool == true) {
            JOptionPane.showMessageDialog(null, "Error! Ya hay un archivo abierto!", "Hey!", JOptionPane.ERROR_MESSAGE);
        } else {
            FileOWindow.setSelectedFile(new File(""));
            FileOWindow.setCurrentDirectory(new File("."));
            if (FileOWindow.showDialog(null, "Abrir Archivo") == JFileChooser.APPROVE_OPTION) {
                OpenFile = FileOWindow.getSelectedFile();
                if (OpenFile.canRead()) {
                    if (OpenFile.getName().endsWith(".jae")) {
                        FileName = OpenFile.getName();
                        directions = OpenFile.toString();
                        textAreaCampos.clear();
                        textArealabels.clear();
                        JOptionPane.showMessageDialog(null, "El archivo se ha abierto exitosamente!");
                        try {
                            FileInputStream iStream = new FileInputStream(directions);
                            BufferedInputStream BiStream = new BufferedInputStream(iStream);

                            String AvailList = "";
                            String campos = "";
                            BufferedReader br = new BufferedReader(new InputStreamReader(BiStream, StandardCharsets.UTF_8));
                            archivoAbierto = new Archivo();

                            AvailList = br.readLine();
                            int availListNext = Integer.valueOf(AvailList);
                            archivoAbierto.setAvailListHead(availListNext);

                            campos = br.readLine();

                            String[] camposArray = campos.split("\\|");

                            archivoAbierto = new Archivo(FileName);
                            for (int i = 1; i <= camposArray.length - 1; i++) {
                                String[] camposArray2 = camposArray[i].split("\\,");
                                String name = camposArray2[0];
                                //  System.out.println(camposArray2[0]);
                                String type = camposArray2[1];
                                //  System.out.println(camposArray2[1]);
                                // String size = camposArray[2];

                                int length = (Integer.parseInt(camposArray2[2]));
                                //   System.out.println(camposArray2[2]);
                                boolean es_no_es = camposArray2[3].equals("true");
                                //  System.out.println(camposArray2[3]);

                                archivoAbierto.addCampo(new Campo(name, type, length, es_no_es));
                            }

                            String registros;
                            while ((registros = br.readLine()) != null) {
                                archivoAbierto.addRegistro(registros);
                            }
                            while (availListNext != -1) {
                                this.AvailList.add(availListNext);
                                AvailList = archivoAbierto.getRegistros().get(availListNext);
                                availListNext = Integer.valueOf(AvailList);
                            }

                            updateCampoTable();
                            updateRegistroTable();
                            abrirArchivo();
                            if (archivoAbierto.getRegistros().size() != 0) {
                                crearCampoButton.setEnabled(false);
                                borrarCampoButton.setEnabled(false);
                                modificarCampoButton.setEnabled(false);
                                archivoAbierto.setCamposCreados(true);
                            }
                            ArchivoTextPane.setText("");
                            // System.out.println(archivoAbierto.toString());
                            //  System.out.println(archivoAbierto.getName());
                            ArchivoTextPane.setText(archivoAbierto.toString());
                            // System.out.println(archivoAbierto.getListaCampos());

                            trees = new ArrayList<BTree>();
                            for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                                trees.add(null);
                                if (archivoAbierto.getCampo(i).isPrimKey()) {
                                    try {
                                        trees.set(i, new BTree(6));
                                        // trees.set(i, trees.get(i).loadT(FileName + archivoAbierto.getCampo(i).getName()));
                                    } catch (Exception e) {
                                        trees.set(i, new BTree(6));
                                    }
                                    if (trees.get(i) == null) {
                                        trees.set(i, new BTree(6));
                                    }
                                }
                            }

                        } catch (IOException ex) {
                            ex.printStackTrace();

                        }
                    }
                }
            }
        }
        posicion = archivoAbierto.getRegistros().size();
        posicion++;
        loadPrueba();
        String head = "";
        int h = 0;
        File archivo = new File(directions);
        FileReader fr;
        try {
            fr = new FileReader(archivo);
            String x = "";
            // RRN -= FileName.length();
            RandomAccessFile af = new RandomAccessFile(archivo, "r");
            //System.out.println("offset: " + (archivoAbierto.sizeCamposs() + RRN));
            af.seek(0);
            // af.seek(((RRN - 1) * recordSize()) + archivoAbierto.sizeCamposs());
            head = af.readLine();
            h = Integer.parseInt(head);
            archivoAbierto.setAvailListHead(h);
            //System.out.println("x: " + x);
            af.close();
            fr.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("head: "+h);
    }//GEN-LAST:event_openBActionPerformed

    private void botonModificarRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonModificarRegistroMouseClicked
        boolean vacio = false;
        boolean malNumericos = false;
        boolean demasiadoLargo = false;
        for (int i = 0; i < textAreaCampos.size(); i++) {
            if (textAreaCampos.get(i).getText().isBlank() || textAreaCampos.get(i).getText().isEmpty()) {
                vacio = true;
                break;
            }
            if (archivoAbierto.getListaCampos().get(i).getType().equals("int")) {
                if (isNumeric(textAreaCampos.get(i).getText()) == false) {
                    malNumericos = true;
                    JOptionPane.showMessageDialog(null, "El campo " + archivoAbierto.getListaCampos().get(i).getName() + " tiene que ser integer.");
                    break;
                }
            }
            if (archivoAbierto.getListaCampos().get(i).getSize() < textAreaCampos.get(i).getText().length()) {
                demasiadoLargo = true;
                if (isNumeric(textAreaCampos.get(i).getText()) == false) {
                    JOptionPane.showMessageDialog(null, "El campo " + archivoAbierto.getListaCampos().get(i).getName() + " tiene que ser de " + archivoAbierto.getListaCampos().get(i).getSize() + " caracteres o menos.");
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "El campo " + archivoAbierto.getListaCampos().get(i).getName() + " tiene que ser de " + archivoAbierto.getListaCampos().get(i).getSize() + " digitos o menos.");
                    break;
                }
            }
        }
        if (vacio) {
            JOptionPane.showMessageDialog(null, "No pueden haber campos vacios.");
        } else if (malNumericos || demasiadoLargo) {

        } else {
            String registro = "";
            String register = "";
            int campo = 0;
            for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                if (archivoAbierto.getListaCampos().get(i).isPrimKey()) {
                    campo = i;
                    break;
                }
            }
            int count = 0;
            for (int i = 0; i < textAreaCampos.size(); i++) {
                if (i == campo) {
                    register = textAreaCampos.get(i).getText();
                }
                if (i != textAreaCampos.size() - 1) {
                    registro += textAreaCampos.get(i).getText() + ",";
                } else {
                    registro += textAreaCampos.get(i).getText();
                }
                textAreaCampos.get(i).setText("");
            }
            Object Item = camposCBox.getSelectedItem();
            int pos1 = 0;
            pos1 = 0;

            ArrayList<String> keys = new ArrayList<String>();
            keys.add(register);
            ArrayList<Long> things = new ArrayList<Long>();
            //  System.out.println("hi");
            trees.get(pos1).modif(trees.get(pos1).getRaiz(), register, things);

            archivoAbierto.getRegistros().remove(indexSiendoModificado);
            archivoAbierto.getRegistros().add(indexSiendoModificado, registro);
            updateRegistroTable();
            nuevoRegistroDialog.setVisible(false);
        }
        trees = null;
        loadPrueba();
    }//GEN-LAST:event_botonModificarRegistroMouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        boolean principal = false;
        ArrayList<String> principales = new ArrayList<String>();
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            if (archivoAbierto.getListaCampos().get(i).isPrimKey()) {
                principal = true;
                break;
            }
        }
        if (principal) {
            if (textAreaCampos.size() == 0) {
                Font fontLabel = new Font("Verdana", Font.BOLD, 14);
                Font fontText = new Font("Verdana", Font.PLAIN, 13);
                textAreaCampos.clear();
                textArealabels.clear();
                panelDialogCampos.setSize(WIDTH, archivoAbierto.getListaCampos().size() * 40 + 200);
                nuevoRegistroDialog.setSize(WIDTH, archivoAbierto.getListaCampos().size() * 40 + 200);
                //panelDialogCampos.setSize(WIDTH, HEIGHT);

                for (int j = 0; j < archivoAbierto.getListaCampos().size(); j++) {
                    JLabel label = new JLabel(archivoAbierto.getCampo(j).getName() + ":", SwingConstants.RIGHT);
                    //label.setBackground(colorTres);
                    panelDialogCampos.add(label);
                    label.setLocation(25, (75 + (j * 40)));
                    label.setHorizontalTextPosition(JLabel.LEFT);
                    label.setVerticalTextPosition(JLabel.CENTER);
                    label.setFont(fontLabel);
                    //label.setText(archivoAbierto.getCampo(j).getName() + ":");
                    label.setSize(200, 35);
                    textArealabels.add(label);

                    JTextField textPane = new JTextField();
                    //textPane.setBackground(colorTres);
                    panelDialogCampos.add(textPane);
                    textPane.setLocation(235, (75 + (j * 40)));
                    textPane.setFont(fontText);
                    textPane.setSize(280, 35);
                    textAreaCampos.add(textPane);
                }
                //ESTO LE DICE QUE YA HAY CAMPOS Y QUE NO SE PUEDEN CAMBIAR
                crearCampoButton.setEnabled(false);
                borrarCampoButton.setEnabled(false);
                modificarCampoButton.setEnabled(false);
                archivoAbierto.setCamposCreados(true);

            }
            botonAgregarRegistro.setEnabled(true);
            botonModificarRegistro.setEnabled(false);
            mostrarMenuDinamicoRegistros();
        } else {
            JOptionPane.showMessageDialog(null, "No se pueden crear Registros porque aun no hay una llave primaria.");
        }

    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (archivoAbiertoBool) {
            if (tablaRegistros.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Porfavor seleccione un Registro que borrar.");
            } else {
                //  System.out.println(tablaRegistros.getSelectedRow());
                //int del = tablaRegistros.getSelectedRow();
                int menos = 0;
                String revisar = "";
                for (int j = 0; j < tablaRegistros.getColumnCount(); j++) {
                    if (j < tablaRegistros.getColumnCount() - 1) {
                        revisar += (String) tablaRegistros.getModel().getValueAt(tablaRegistros.getSelectedRow(), j) + ",";
                    } else {
                        revisar += (String) tablaRegistros.getModel().getValueAt(tablaRegistros.getSelectedRow(), j);
                    }
                }
                for (int i = tablaRegistros.getSelectedRow(); i < archivoAbierto.getRegistros().size(); i++) {
                    if (revisar.equals(archivoAbierto.getRegistros().get(i))) {
                        archivoAbierto.getRegistros().remove(i);
                        archivoAbierto.getRegistros().add(i, "-1");
                        if (archivoAbierto.getAvailListHead() == -1) {
                            archivoAbierto.setAvailListHead(i);
                        }
                        //archivoAbierto.setAvailListHead(i);
                        AvailList.add(i);
                        break;
                    }
                }

                guardarFile(FileName, 2);
                updateRegistroTable();
                trees = null;
                loadPrueba();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay ningun archivo abierto.");
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void crearCampoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearCampoButton1ActionPerformed
        if (archivoAbiertoBool == true) {
            textAreaCampos.clear();
            textArealabels.clear();
            JFileChooser create = new JFileChooser("./");
            int result = create.showSaveDialog(null);
            File archivo = new File(create.getSelectedFile() + ".csv");

            if (result == JFileChooser.APPROVE_OPTION) {
                String nameFile = archivo.getName();
                String dir = archivo.toString();

                if (nameFile == null || "".equals(nameFile)) {
                    JOptionPane.showMessageDialog(null, "El nombre del archivo no es valido.");
                } else {
                    try {
                        String salvar = "";
                        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                            salvar += archivoAbierto.getListaCampos().get(i);
                            if (i != archivoAbierto.getListaCampos().size() - 1) {
                                salvar += ",";
                            }
                        }
                        salvar += "\n";
                        for (int i = 0; i < archivoAbierto.getRegistros().size(); i++) {
                            String[] registrosCampos = archivoAbierto.getRegistros().get(i).split(",");
                            if (registrosCampos.length == 1 && isNumeric(registrosCampos[0])) {
                            }
                            else {
                                salvar += archivoAbierto.getRegistros().get(i);
                                if (i != archivoAbierto.getRegistros().size() - 1) {
                                    salvar += "\n";
                                }
                            }
                        }
                        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(dir)));
                        writer.write(salvar);
                        //writer.write(salvar.getBytes());
                        writer.flush();
                        writer.close();

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                    JOptionPane.showMessageDialog(null, "Archivo exportado exitosamente");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "ERROR: No hay archivo que exportar!", "Hey!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_crearCampoButton1ActionPerformed

    private void crearCampoButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearCampoButton2ActionPerformed
        if (archivoAbiertoBool == true) {
            textAreaCampos.clear();
            textArealabels.clear();
            JFileChooser create = new JFileChooser("./");
            int result = create.showSaveDialog(null);
            File archivo = new File(create.getSelectedFile() + ".xml");

            if (result == JFileChooser.APPROVE_OPTION) {
                String nameFile = archivo.getName();
                String dir = archivo.toString();

                if (nameFile == null || "".equals(nameFile)) {
                    JOptionPane.showMessageDialog(null, "El nombre del archivo no es valido.");
                } else {
                    try {
                        String salvar = "";
                        salvar += "<archivo>\n";
                        for (int i = 0; i < archivoAbierto.getRegistros().size(); i++) {
                            String[] registrosCampos = archivoAbierto.getRegistros().get(i).split(",");
                            if (registrosCampos.length == 1 && isNumeric(registrosCampos[0])) { 
                                
                            } 
                            else {
                                salvar += "     <registro>\n";
                                for (int j = 0; j < archivoAbierto.getListaCampos().size(); j++) {
                                    salvar += "         <" + archivoAbierto.getListaCampos().get(j) + ">" + archivoAbierto.getListaCampos().get(j).getType() + "=" + registrosCampos[j] + "</" + archivoAbierto.getListaCampos().get(j) + ">\n";
                                }
                                salvar += "     </registro>\n";
                            }
                        }
                        salvar += "</archivo>";
                        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(dir)));
                        writer.write(salvar);
                        //writer.write(salvar.getBytes());
                        writer.flush();
                        writer.close();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    JOptionPane.showMessageDialog(null, "Archivo exportado exitosamente");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "ERROR: No hay archivo que exportar!", "Hey!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_crearCampoButton2ActionPerformed

    private void botonAgregarRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAgregarRegistroMouseClicked
        boolean vacio = false;
        boolean malNumericos = false;
        boolean demasiadoLargo = false;
        for (int i = 0; i < textAreaCampos.size(); i++) {
            if (textAreaCampos.get(i).getText().isBlank() || textAreaCampos.get(i).getText().isEmpty()) {
                vacio = true;
                break;
            }
            if (archivoAbierto.getListaCampos().get(i).getType().equals("int")) {
                if (isNumeric(textAreaCampos.get(i).getText()) == false) {
                    malNumericos = true;
                    JOptionPane.showMessageDialog(null, "El campo " + archivoAbierto.getListaCampos().get(i).getName() + " tiene que ser integer.");
                    break;
                }
            }
            if (archivoAbierto.getListaCampos().get(i).getSize() < textAreaCampos.get(i).getText().length()) {
                demasiadoLargo = true;
                if (isNumeric(textAreaCampos.get(i).getText()) == false) {
                    JOptionPane.showMessageDialog(null, "El campo " + archivoAbierto.getListaCampos().get(i).getName() + " tiene que ser de " + archivoAbierto.getListaCampos().get(i).getSize() + " caracteres o menos.");
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "El campo " + archivoAbierto.getListaCampos().get(i).getName() + " tiene que ser de " + archivoAbierto.getListaCampos().get(i).getSize() + " digitos o menos.");
                    break;
                }
            }
        }

        if (vacio) {
            JOptionPane.showMessageDialog(null, "No pueden haber campos vacios.");
        } else if (malNumericos || demasiadoLargo) {

        } else {
            String registro = "";
            if (trees == null) {
                trees = new ArrayList<BTree>();
                for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                    trees.add(null);
                }
                trees.set(getPrimeKey(), new BTree(6));
            }
            int campo = 0;
            for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                if (archivoAbierto.getListaCampos().get(i).isPrimKey()) {
                    campo = i;
                    break;
                }
            }
            String register = "";
            int count = 0;
            for (int i = 0; i < textAreaCampos.size(); i++) {
                if (i == campo) {
                    register = textAreaCampos.get(i).getText();
                    //System.out.println(register);
                    //count++;
                }

                if (i != textAreaCampos.size() - 1) {

                    registro += textAreaCampos.get(i).getText() + ",";
                } else {
                    registro += textAreaCampos.get(i).getText();
                }
                textAreaCampos.get(i).setText("");
            }
            // System.out.println("register: " + register);
            if (AvailList.isEmpty()) {
                archivoAbierto.addRegistro(registro);
                //   System.out.println("helloo in here ");

                getPrimeK().insert(register, offset);
                offset += registro.length() + 1;
                //System.out.println("position: " + posicion);
                posicion++;
                //  System.out.println("trees: ");
                // System.out.println(getPrimeK());
                //  getPrimeK().imprimir_arbol(0, 0);
            } else {
                int posicion = AvailList.get(AvailList.size() - 1);
                AvailList.remove(AvailList.size() - 1);
                archivoAbierto.getRegistros().remove(posicion);
                archivoAbierto.getRegistros().add(posicion, registro);
                // System.out.println(registro);
                // System.out.println("Position: " + posicion);
                getPrimeK().insert(register, offset);
                offset += registro.length() + 1;
                // System.out.println("trees: ");
                // System.out.println(trees);
                //  getPrimeK().imprimir_arbol(0, 0);
                if (AvailList.isEmpty()) {
                    archivoAbierto.setAvailListHead(-1);
                }
            }
            //System.out.println("helloo ");
            //  System.out.println(AvailList);
            updateRegistroTable();
            nuevoRegistroDialog.setVisible(false);
        }
    }//GEN-LAST:event_botonAgregarRegistroMouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        if (tablaRegistros.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Porfavor seleccione un Registro que modificar.");
        } else {
            if (textAreaCampos.size() == 0) {
                Font fontLabel = new Font("Verdana", Font.BOLD, 14);
                Font fontText = new Font("Verdana", Font.PLAIN, 13);
                textAreaCampos.clear();
                textArealabels.clear();
                panelDialogCampos.setSize(WIDTH, archivoAbierto.getListaCampos().size() * 40 + 200);
                nuevoRegistroDialog.setSize(WIDTH, archivoAbierto.getListaCampos().size() * 40 + 200);
                //panelDialogCampos.setSize(WIDTH, HEIGHT);

                for (int j = 0; j < archivoAbierto.getListaCampos().size(); j++) {
                    JLabel label = new JLabel(archivoAbierto.getCampo(j).getName() + ":", SwingConstants.RIGHT);
                    //label.setBackground(colorTres);
                    panelDialogCampos.add(label);
                    label.setLocation(25, (75 + (j * 40)));
                    label.setHorizontalTextPosition(JLabel.LEFT);
                    label.setVerticalTextPosition(JLabel.CENTER);
                    label.setFont(fontLabel);
                    //label.setText(archivoAbierto.getCampo(j).getName() + ":");
                    label.setSize(200, 35);
                    textArealabels.add(label);

                    JTextField textPane = new JTextField();
                    //textPane.setBackground(colorTres);
                    panelDialogCampos.add(textPane);
                    textPane.setLocation(235, (75 + (j * 40)));
                    textPane.setFont(fontText);
                    textPane.setSize(280, 35);
                    textAreaCampos.add(textPane);
                }
                //ESTO LE DICE QUE YA HAY CAMPOS Y QUE NO SE PUEDEN CAMBIAR
                crearCampoButton.setEnabled(false);
                borrarCampoButton.setEnabled(false);
                modificarCampoButton.setEnabled(false);
                archivoAbierto.setCamposCreados(true);

            }
            botonAgregarRegistro.setEnabled(false);
            botonModificarRegistro.setEnabled(true);
            String revisar = "";
            for (int j = 0; j < tablaRegistros.getColumnCount(); j++) {
                if (j < tablaRegistros.getColumnCount() - 1) {
                    revisar += (String) tablaRegistros.getModel().getValueAt(tablaRegistros.getSelectedRow(), j) + ",";
                } else {
                    revisar += (String) tablaRegistros.getModel().getValueAt(tablaRegistros.getSelectedRow(), j);
                }
            }
            for (int i = tablaRegistros.getSelectedRow(); i < archivoAbierto.getRegistros().size(); i++) {
                if (archivoAbierto.getRegistros().get(i).equals(revisar)) {
                    indexSiendoModificado = i;
                }
            }
            String[] registros = revisar.split(",");
            System.out.println();
            for (int i = 0; i < textAreaCampos.size(); i++) {
                textAreaCampos.get(i).setText(registros[i]);
            }
            botonAgregarRegistro.setEnabled(false);
            botonModificarRegistro.setEnabled(true);
            mostrarMenuDinamicoRegistros();
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private void camposCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camposCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_camposCBoxActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // abrir buscar 

        DefaultTableModel modelo = new DefaultTableModel();
        tablaSearch.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tablaSearch.getModel();
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            String campo = archivoAbierto.getCampo(i).getName();

            model.addColumn(campo);
        }
        tablaSearch.setModel(model);

        camposCBox.setModel(new DefaultComboBoxModel<>());
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            if (archivoAbierto.getCampo(i).isPrimKey()) {

                //camposCBox.addItem(new ComboItem(archivoAbierto.getCampo(i).getName(), i));
                String campo = archivoAbierto.getCampo(i).getName();
                //  System.out.println(campo);
                //System.out.println("ComboBox");
                camposCBox.addItem(new ComboItem(archivoAbierto.getCampo(i).getName(), i));

                break;
            }
        }
        buscarRecord.pack();
        buscarRecord.setModal(true);
        buscarRecord.setLocationRelativeTo(null);
        buscarRecord.setVisible(true);

        SearchTF.setText("");
        // getPrimeK().imprimir_arbol(0, 0);
        //System.out.println("no hice na");
    }//GEN-LAST:event_jButton8ActionPerformed
    public void loadPrueba() {
        offset = 0;
        if (trees == null) {
            trees = new ArrayList<BTree>();
            for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
                trees.add(null);
            }
            trees.set(getPrimeKey(), new BTree(6));
        }
        int campo = 0;
        ArrayList<String> principales = new ArrayList<String>();
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            if (archivoAbierto.getListaCampos().get(i).isPrimKey()) {
                campo = i;
                break;
            }
        }

        for (int i = 0; i < archivoAbierto.getRegistros().size(); i++) {
            //String[] registro = nodito.getLlaves().get(i).getLlave().split(",");

            String[] registros = archivoAbierto.getRegistros().get(i).split(",");
            String noC = ((registros[campo]));

            principales.add(noC);
            // getPrimeK().insert(noC, offset);
            //offset += archivoAbierto.getRegistros().get(i).length() + 1;

        }

        for (int i = 0; i < principales.size(); i++) {
            getPrimeK().insert(principales.get(i), offset);
            offset += archivoAbierto.getRegistros().get(i).length() + 1;
        }

    }
    private void botonAgregarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarRegistroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonAgregarRegistroActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (SearchTF.getText().equals("") || camposCBox.getSelectedItem() == null) {
            return;
        }
        Object Item = camposCBox.getSelectedItem();
        int pos = ((ComboItem) Item).getPos();
        pos = ((ComboItem) Item).getPos();
        DefaultTableModel model = (DefaultTableModel) tablaSearch.getModel();
        model.getDataVector().removeAllElements();
        if (true || camposCBox.getSelectedIndex() == 0) {
            int pk = pos;
            String llave = SearchTF.getText();
            /* if (archivoAbierto.getCampo(pk).getType().equals("int")) {
                int num = archivoAbierto.getCampo(pk).getSize() - llave.length();
                llave = espacios.substring(0, num) + llave;
            }*/
            ArrayList<String> keys = new ArrayList<String>();
            /*for (int i = 0; i < archivoAbierto.getRegistros().size(); i++) {
                String llaveTemp = archivoAbierto.getRegistros().get(i);
                if (llaveTemp.contains(llave)) {
                    keys.add(llave);

                }
            }*/
            keys.add(llave);
            ArrayList<Long> thingy = new ArrayList<Long>();
            trees.get(pos).BTreeSearch(trees.get(pos).getRaiz(), keys, thingy);
            //System.out.println("thing: " + thingy);
            if (thingy.size() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontro ningun registro con ese valor");
                SearchTF.setText("");
                return;
            }

            for (Long l : thingy) {

                RRN = Math.toIntExact(l);

                try {
                    String regisD = buscarR(Math.toIntExact(RRN));
                    //System.out.println(regisD);
                    String arr[] = regisD.split("\\,");
                    Object arr2[] = new Object[model.getColumnCount()];
                    for (int i = 0; i < model.getColumnCount(); i++) {
                        arr2[i] = arr[i];
                    }
                    model.addRow(arr2);

                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                // updateRegistroTable2(thingy);
            }
            //System.out.println(thingy);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jButton9AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9AncestorAdded

    public void mostrarMenuDinamicoRegistros() {
        nuevoRegistroDialog.setModal(true);
        nuevoRegistroDialog.pack();
        nuevoRegistroDialog.setLocationRelativeTo(this);
        nuevoRegistroDialog.setVisible(true);
    }

    private String buscarR(int RRN) throws FileNotFoundException, IOException {
        //System.out.println("RRN: " + RRN);
        File archivo = new File(directions);
        FileReader fr = new FileReader(archivo);
        String x = "";
        // RRN -= FileName.length();
        RandomAccessFile af = new RandomAccessFile(archivo, "r");
        //System.out.println("offset: " + (archivoAbierto.sizeCamposs() + RRN));
        af.seek(archivoAbierto.sizeCamposs() + RRN);
        // af.seek(((RRN - 1) * recordSize()) + archivoAbierto.sizeCamposs());
        x = af.readLine();
        //System.out.println("x: " + x);
        af.close();
        fr.close();

        return x;
    }

    private int recordSize() {
        int length = 0;
        for (Campo campo : archivoAbierto.getListaCampos()) {
            length += campo.getSize();
        }
        return length + archivoAbierto.getListaCampos().size() + 1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    public void abrirArchivo() {
        archivoAbiertoBool = true;
        ArchivoAbiertoIndicatorLight.setBackground(colorAbierto);
        ArchivoAbiertoIndicatorText.setText("ARCHIVO ABIERTO");
    }

    public void cerrarArchivo() {
        archivoAbiertoBool = false;
        archivoAbierto = null;
        ArchivoAbiertoIndicatorLight.setBackground(colorCerrado);
        ArchivoAbiertoIndicatorText.setText("ARCHIVO CERRADO");
    }

    public void mostrarNuevoCampo() {
        if (archivoAbierto.hasPrimaryKey()) {
            llavePrimariaCheckbox.setEnabled(false);
        } else {
            llavePrimariaCheckbox.setEnabled(true);
        }
        nuevoCampoDialog.setModal(true);
        nuevoCampoDialog.pack();
        nuevoCampoDialog.setLocationRelativeTo(this);
        nuevoCampoDialog.setVisible(true);
    }

    public void updateCampoTable() {
        DefaultTableModel modelo = (DefaultTableModel) camposTable.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            Campo c = archivoAbierto.getListaCampos().get(i);
            Object[] newrow = {c.getName(), c.getType(), c.getSize(), c.isPrimKey()};
            modelo.addRow(newrow);
        }
        camposTable.setModel(modelo);
    }

    public void clearCampoTable() {
        DefaultTableModel modelo = (DefaultTableModel) camposTable.getModel();
        for (int i = 0; i < camposTable.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
        camposTable.setModel(modelo);
    }

    public void updateRegistroTable() {
        DefaultTableModel modelo = (DefaultTableModel) tablaRegistros.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            Campo c = archivoAbierto.getListaCampos().get(i);
            modelo.addColumn(c.toString());
        }
        for (int i = 0; i < archivoAbierto.getRegistros().size(); i++) {
            String[] registro = archivoAbierto.getRegistros().get(i).split("\\,");
            if (registro.length == 1 && isNumeric(registro[0])) {

            } else if (registro.length == 1) {
                modelo.addRow(registro);
            } else {
                modelo.addRow(registro);
            }

        }
        tablaRegistros.setModel(modelo);
        tablaRegistros.getTableHeader().setReorderingAllowed(false);
    }

    public void updateRegistroTable2(ArrayList<Long> x) {
        DefaultTableModel modelo = (DefaultTableModel) tablaSearch.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < archivoAbierto.getListaCampos().size(); i++) {
            Campo c = archivoAbierto.getListaCampos().get(i);
            modelo.addColumn(c.toString());
        }
        for (int i = 0; i < x.size(); i++) {
            // String[] registro = x.get(i).split("\\,");
            //  if (registro.length == 1 && isNumeric(registro[0])) {

            //   } else if (registro.length == 1) {
            //modelo.addRow(registro);
            //  } else {
            //    modelo.addRow(registro);
            //  }
        }
        tablaSearch.setModel(modelo);
        tablaSearch.getTableHeader().setReorderingAllowed(false);
    }

    public void clearRegistroTable() {
        DefaultTableModel modelo = (DefaultTableModel) tablaRegistros.getModel();
        for (int i = 0; i < tablaRegistros.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
        modelo.setColumnCount(0);
        tablaRegistros.setModel(modelo);
    }

    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private String espacios = new String(new char[1024]).replace('\0', ' ');
    Color colorUno = new Color(240, 235, 216);
    Color colorDos = new Color(116, 140, 171);
    Color colorTres = new Color(62, 92, 118);
    Color colorCuatro = new Color(29, 45, 68);
    Color colorCinco = new Color(13, 19, 33);
    Color colorAbierto = new Color(204, 255, 204);
    Color colorCerrado = new Color(255, 153, 153);
    private String FileName;
    ArrayList<Long> rrnsEli;

    private int RRN = 0;
    private long posicion = 0;
    private long offset = 0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ArchivoAbiertoIndicatorLight;
    private javax.swing.JLabel ArchivoAbiertoIndicatorText;
    private javax.swing.JTextArea ArchivoTextPane;
    private javax.swing.JSpinner NuevoCampoLongitud;
    private javax.swing.JTextField NuevoCampoNombre;
    private javax.swing.JComboBox<String> NuevoCampoTipo;
    private javax.swing.JTextField SearchTF;
    private javax.swing.JLabel TitleArchivos;
    private javax.swing.JLabel TitleCampos;
    private javax.swing.JLabel TitleIndices;
    private javax.swing.JLabel TitleRegistros;
    private javax.swing.JLabel TitleUtilidades;
    private javax.swing.JButton borrarCampoButton;
    private javax.swing.JButton botonAgregarRegistro;
    private javax.swing.JButton botonMenuArchivos;
    private javax.swing.JButton botonMenuCampos;
    private javax.swing.JButton botonMenuIndices;
    private javax.swing.JButton botonMenuRegistros;
    private javax.swing.JButton botonMenuUtilidades;
    private javax.swing.JButton botonModificarRegistro;
    private javax.swing.JDialog buscarRecord;
    private javax.swing.JComboBox<ComboItem> camposCBox;
    private javax.swing.JScrollPane camposTabla;
    private javax.swing.JTable camposTable;
    private javax.swing.JButton close2B;
    private javax.swing.JButton closeFB;
    private javax.swing.JButton crearCampoButton;
    private javax.swing.JButton crearCampoButton1;
    private javax.swing.JButton crearCampoButton2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox llavePrimariaCheckbox;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton modificarButton;
    private javax.swing.JButton modificarCampoButton;
    private javax.swing.JButton newFB;
    private javax.swing.JDialog nuevoCampoDialog;
    private javax.swing.JDialog nuevoRegistroDialog;
    private javax.swing.JButton openB;
    private javax.swing.JPanel panelArchivos;
    private javax.swing.JPanel panelCampos;
    private javax.swing.JPanel panelDialogCampos;
    private javax.swing.JPanel panelIndices;
    private javax.swing.JPanel panelRegistros;
    private javax.swing.JPanel panelUtilidades;
    private javax.swing.JButton registrarButton;
    private javax.swing.JButton saveB;
    private javax.swing.JTable tablaRegistros;
    private javax.swing.JTable tablaSearch;
    // End of variables declaration//GEN-END:variables
}
